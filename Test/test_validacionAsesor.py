# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
from utilidad import Util

class TestValidacionAsesor():
  def setup_method(self, method):
    self.util = Util("http://crmclientes.dev.win.local/")
    self.driver = self.util.test_driver()
    self.registros = self.util.data_test(10)
    self.resultado = 0
    
    #Login
    self.util.wait_name_clic("username").send_keys("70616828")
    self.util.wait_name_clic("password").send_keys("70616828")
    self.util.wait_css_clic(".btn")
  
  def teardown_method(self, method):
    self.driver.quit()

  def test_all_validacion(self):
    # Iterar sobre los registros y usarlos en Selenium
    for registro in self.registros:
        # Ejemplo: Rellenar un formulario con los datos de la tabla
        self.dni = registro[4]
        self.id = registro[0]
        self.one_validacion()
        print(f"Registro procesado: {registro}")
  
  def one_validacion(self):
    self.driver.get("http://crmclientes.dev.win.local/pages/bo_asesor_validacion.php")
    self.util.wait_id_clic("busca_estado").find_element(By.XPATH, "//option[. = 'FILTRAR:']").click()
    self.util.wait_id_clic("cb_busca_columna").find_element(By.XPATH, "//option[. = 'Nro documento']").click()
    self.util.wait_id_clic("txt_busca").send_keys(self.dni + Keys.RETURN)
    self.util.wait_css_clic(".btn-info")
    time.sleep(3)
    self.resultado = 0
    badges = self.util.exist_css("badge")
    iconos = self.util.exist_css("edit")
    index = -1
    fila = -1
    if( badges ): # demuestra existencia
      for badge in badges:
        index = index + 1
        if( index % 2 == 0):
          fila = fila + 1
          if( badge.text == "SIN GESTIONAR" ):
            iconos[fila].click()
            time.sleep(3)
            self.util.wait_id_clic("cb_resultado1").send_keys("A" + Keys.RETURN)
            self.util.wait_id_clic("cb_resultado2").send_keys("T" + Keys.RETURN)
            self.util.wait_id_clic("txt_descripcion_validacion").send_keys("MIGRACION WIN - ULTRA")
            self.util.wait_id_clic("bt_guardar")
            time.sleep(3)
            self.util.wait_id_clic("boton_enviar_validacion")
            self.util.wait_css_clic(".confirm")
            self.util.cerrar_prueba(20, "ok", self.id)
    return 0
  
